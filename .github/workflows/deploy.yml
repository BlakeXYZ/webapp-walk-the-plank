
name: pipeline
on:
  - push
# on:
#  push:
#    branches:
#      - "main"

permissions:
  contents: read
  packages: write

jobs:
  run-tests:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Run tests with Docker Compose
        run: docker compose -f docker-compose-dev.yml run --rm manage test

  # Build and push Docker image to GitHub Container Registry
  build-and-push-image:
    if: "contains(github.event.head_commit.message, '[deploy]')"
    runs-on: ubuntu-latest
    needs:
      - run-tests
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: https://ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: Dockerfile
          push: true
          target: production
          tags: |
            ghcr.io/blakexyz/webapp-walk-the-plank-ghcr:latest
            ghcr.io/blakexyz/webapp-walk-the-plank-ghcr:${{ github.sha }}

  deploy:
    if: "contains(github.event.head_commit.message, '[deploy]')"
    runs-on: ubuntu-latest
    needs:
      - build-and-push-image
    steps:
    - name: Checkout code
      uses: actions/checkout@v5

    - name: create env file
      run: |
        echo "GIT_COMMIT_HASH=${{ github.sha }}" >> ./envfile

    - name: Docker Stack Deploy
      uses: cssnr/stack-deploy-action@v1
      with:
        name: walk-the-plank-stack-deploy
        file: docker-compose-prod.yml
        host: walktheplank.app
        user: deploy
        ssh_key: ${{ secrets.DEPLOY_SSH_PRIVATE_KEY }}
        env_file: ./envfile
        registry_auth: true
        # view info on ubuntu cli with:
        #   docker stack ls
        #   docker service ls
        #   docker service ps ham-test-gitactions-test_web  --no-trunc 